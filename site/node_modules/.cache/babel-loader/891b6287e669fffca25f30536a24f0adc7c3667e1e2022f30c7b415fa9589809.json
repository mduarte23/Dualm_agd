{"ast":null,"code":"import axios from 'axios';\n\n// Base da API\n// Em desenvolvimento, deixe vazio para usar o proxy do CRA (definido no package.json)\n// Em produção, defina REACT_APP_API_URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nclass AuthService {\n  // Login: autentica e retorna o usuário do tenant\n  async login(domain, email, password) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/login`, {\n        dominio: domain,\n        email,\n        senha: password\n      });\n      const data = response.data || {};\n      if (!data.success) {\n        throw new Error(data.message || 'Falha no login');\n      }\n      const user = data.usuario || {};\n      const token = data.token;\n\n      // Persistir usuário e domínio atual\n      localStorage.setItem('userInfo', JSON.stringify(user));\n      localStorage.setItem('clientInfo', JSON.stringify({\n        dominio: domain\n      }));\n      if (token) {\n        localStorage.setItem('authToken', token);\n        try {\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        } catch {}\n      }\n      return {\n        success: true,\n        user,\n        clientInfo: {\n          domain\n        }\n      };\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      const status = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n      if (status === 400) {\n        throw new Error('Preencha domínio, e-mail e senha');\n      }\n      if (status === 401) {\n        throw new Error('E-mail ou senha incorretos');\n      }\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Erro ao fazer login. Tente novamente.');\n    }\n  }\n\n  // Verificar se o usuário está logado\n  isAuthenticated() {\n    const userInfo = localStorage.getItem('userInfo');\n    return !!userInfo;\n  }\n\n  // Obter informações do usuário logado\n  getCurrentUser() {\n    const userInfo = localStorage.getItem('userInfo');\n    return userInfo ? JSON.parse(userInfo) : null;\n  }\n\n  // Obter informações do cliente\n  getCurrentClient() {\n    const clientInfo = localStorage.getItem('clientInfo');\n    return clientInfo ? JSON.parse(clientInfo) : null;\n  }\n\n  // Logout\n  logout() {\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('clientInfo');\n    localStorage.removeItem('authToken');\n    try {\n      delete axios.defaults.headers.common['Authorization'];\n    } catch {}\n  }\n  async updateAccountRemote({\n    id_usuario,\n    nome,\n    email,\n    senha,\n    tema\n  }) {\n    var _this$getCurrentClien;\n    const dominio = (_this$getCurrentClien = this.getCurrentClient()) === null || _this$getCurrentClien === void 0 ? void 0 : _this$getCurrentClien.dominio;\n    const payload = {\n      dominio,\n      id_usuario,\n      nome_usuario: nome,\n      email,\n      senha\n    };\n    if (typeof tema === 'boolean') payload.tema = tema;\n    const response = await axios.put(`${API_BASE_URL}/conta`, payload);\n    const data = response.data || {};\n    if (!data.success) throw new Error(data.message || 'Erro ao atualizar conta');\n    // Atualiza localmente nome/email\n    const userInfo = this.getCurrentUser() || {};\n    const updated = {\n      ...userInfo,\n      nome: nome !== null && nome !== void 0 ? nome : userInfo.nome,\n      email: email !== null && email !== void 0 ? email : userInfo.email\n    };\n    if (typeof tema === 'boolean') updated.tema = tema;\n    localStorage.setItem('userInfo', JSON.stringify(updated));\n    return {\n      success: true,\n      user: updated\n    };\n  }\n  async forgotPassword(domain, email) {\n    const response = await axios.post(`${API_BASE_URL}/login/esqueci`, {\n      dominio: domain,\n      email\n    });\n    const data = response.data || {};\n    if (!data.success) throw new Error(data.message || 'Erro ao solicitar redefinição');\n    return data;\n  }\n  async resetPassword(token, password) {\n    const response = await axios.post(`${API_BASE_URL}/login/redefinir`, {\n      token,\n      senha: password\n    });\n    const data = response.data || {};\n    if (!data.success) throw new Error(data.message || 'Erro ao redefinir senha');\n    return data;\n  }\n  async resetPasswordWithCode(domain, email, code, password) {\n    const response = await axios.post(`${API_BASE_URL}/login/redefinir-codigo`, {\n      dominio: domain,\n      email,\n      codigo: code,\n      senha: password\n    });\n    const data = response.data || {};\n    if (!data.success) throw new Error(data.message || 'Erro ao redefinir senha');\n    return data;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","login","domain","email","password","response","post","dominio","senha","data","success","Error","message","user","usuario","token","localStorage","setItem","JSON","stringify","defaults","headers","common","clientInfo","error","_error$response","_error$response2","_error$response2$data","status","isAuthenticated","userInfo","getItem","getCurrentUser","parse","getCurrentClient","logout","removeItem","updateAccountRemote","id_usuario","nome","tema","_this$getCurrentClien","payload","nome_usuario","put","updated","forgotPassword","resetPassword","resetPasswordWithCode","code","codigo","authService"],"sources":["C:/Users/mduarte/Desktop/Projetos/Dualm_agd/site/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base da API\r\n// Em desenvolvimento, deixe vazio para usar o proxy do CRA (definido no package.json)\r\n// Em produção, defina REACT_APP_API_URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\r\n\r\nclass AuthService {\r\n  // Login: autentica e retorna o usuário do tenant\r\n  async login(domain, email, password) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/login`, {\r\n        dominio: domain,\r\n        email,\r\n        senha: password\r\n      });\r\n\r\n      const data = response.data || {};\r\n\r\n      if (!data.success) {\r\n        throw new Error(data.message || 'Falha no login');\r\n      }\r\n\r\n      const user = data.usuario || {};\r\n      const token = data.token;\r\n\r\n      // Persistir usuário e domínio atual\r\n      localStorage.setItem('userInfo', JSON.stringify(user));\r\n      localStorage.setItem('clientInfo', JSON.stringify({ dominio: domain }));\r\n      if (token) {\r\n        localStorage.setItem('authToken', token);\r\n        try { axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; } catch {}\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        user,\r\n        clientInfo: { domain }\r\n      };\r\n    } catch (error) {\r\n      const status = error.response?.status;\r\n      if (status === 400) {\r\n        throw new Error('Preencha domínio, e-mail e senha');\r\n      }\r\n      if (status === 401) {\r\n        throw new Error('E-mail ou senha incorretos');\r\n      }\r\n      throw new Error(error.response?.data?.message || 'Erro ao fazer login. Tente novamente.');\r\n    }\r\n  }\r\n\r\n  // Verificar se o usuário está logado\r\n  isAuthenticated() {\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    return !!userInfo;\r\n  }\r\n\r\n  // Obter informações do usuário logado\r\n  getCurrentUser() {\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    return userInfo ? JSON.parse(userInfo) : null;\r\n  }\r\n\r\n  // Obter informações do cliente\r\n  getCurrentClient() {\r\n    const clientInfo = localStorage.getItem('clientInfo');\r\n    return clientInfo ? JSON.parse(clientInfo) : null;\r\n  }\r\n\r\n  // Logout\r\n  logout() {\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('clientInfo');\r\n    localStorage.removeItem('authToken');\r\n    try { delete axios.defaults.headers.common['Authorization']; } catch {}\r\n  }\r\n\r\n  async updateAccountRemote({ id_usuario, nome, email, senha, tema }) {\r\n    const dominio = this.getCurrentClient()?.dominio;\r\n    const payload = { dominio, id_usuario, nome_usuario: nome, email, senha };\r\n    if (typeof tema === 'boolean') payload.tema = tema;\r\n    const response = await axios.put(`${API_BASE_URL}/conta`, payload);\r\n    const data = response.data || {};\r\n    if (!data.success) throw new Error(data.message || 'Erro ao atualizar conta');\r\n    // Atualiza localmente nome/email\r\n    const userInfo = this.getCurrentUser() || {};\r\n    const updated = { ...userInfo, nome: nome ?? userInfo.nome, email: email ?? userInfo.email };\r\n    if (typeof tema === 'boolean') updated.tema = tema;\r\n    localStorage.setItem('userInfo', JSON.stringify(updated));\r\n    return { success: true, user: updated };\r\n  }\r\n\r\n  async forgotPassword(domain, email) {\r\n    const response = await axios.post(`${API_BASE_URL}/login/esqueci`, {\r\n      dominio: domain,\r\n      email\r\n    });\r\n    const data = response.data || {};\r\n    if (!data.success) throw new Error(data.message || 'Erro ao solicitar redefinição');\r\n    return data;\r\n  }\r\n\r\n  async resetPassword(token, password) {\r\n    const response = await axios.post(`${API_BASE_URL}/login/redefinir`, {\r\n      token,\r\n      senha: password,\r\n    });\r\n    const data = response.data || {};\r\n    if (!data.success) throw new Error(data.message || 'Erro ao redefinir senha');\r\n    return data;\r\n  }\r\n\r\n  async resetPasswordWithCode(domain, email, code, password) {\r\n    const response = await axios.post(`${API_BASE_URL}/login/redefinir-codigo`, {\r\n      dominio: domain,\r\n      email,\r\n      codigo: code,\r\n      senha: password,\r\n    });\r\n    const data = response.data || {};\r\n    if (!data.success) throw new Error(data.message || 'Erro ao redefinir senha');\r\n    return data;\r\n  }\r\n}\r\n\r\nconst authService = new AuthService();\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}