{"ast":null,"code":"import axios from 'axios';\nimport authService from './authService';\n\n// Base da API: usa proxy do CRA em dev\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nfunction ensureDomain() {\n  const client = authService.getCurrentClient();\n  const domain = client === null || client === void 0 ? void 0 : client.dominio;\n  if (!domain) {\n    throw new Error('Domínio não definido. Faça login novamente.');\n  }\n  return domain;\n}\nasync function list() {\n  const dominio = ensureDomain();\n  const response = await axios.get(`${API_BASE_URL}/especialistas`, {\n    params: {\n      dominio\n    }\n  });\n  const payload = response.data || {};\n  if (!payload.success) {\n    throw new Error(payload.message || 'Erro ao buscar especialistas');\n  }\n  return payload.data || [];\n}\nasync function getById(id) {\n  const dominio = ensureDomain();\n  const response = await axios.get(`${API_BASE_URL}/especialistas/${id}`, {\n    params: {\n      dominio\n    }\n  });\n  const payload = response.data || {};\n  if (!payload.success) {\n    throw new Error(payload.message || 'Especialista não encontrado');\n  }\n  return payload.data;\n}\nconst especialistasService = {\n  list,\n  getById\n};\nexport default especialistasService;","map":{"version":3,"names":["axios","authService","API_BASE_URL","process","env","REACT_APP_API_URL","ensureDomain","client","getCurrentClient","domain","dominio","Error","list","response","get","params","payload","data","success","message","getById","id","especialistasService"],"sources":["C:/Users/mduarte/Desktop/Projetos/Dualm_agd/site/src/services/especialistasService.js"],"sourcesContent":["import axios from 'axios';\r\nimport authService from './authService';\r\n\r\n// Base da API: usa proxy do CRA em dev\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\r\n\r\nfunction ensureDomain() {\r\n  const client = authService.getCurrentClient();\r\n  const domain = client?.dominio;\r\n  if (!domain) {\r\n    throw new Error('Domínio não definido. Faça login novamente.');\r\n  }\r\n  return domain;\r\n}\r\n\r\nasync function list() {\r\n  const dominio = ensureDomain();\r\n  const response = await axios.get(`${API_BASE_URL}/especialistas`, {\r\n    params: { dominio }\r\n  });\r\n  const payload = response.data || {};\r\n  if (!payload.success) {\r\n    throw new Error(payload.message || 'Erro ao buscar especialistas');\r\n  }\r\n  return payload.data || [];\r\n}\r\n\r\nasync function getById(id) {\r\n  const dominio = ensureDomain();\r\n  const response = await axios.get(`${API_BASE_URL}/especialistas/${id}`, {\r\n    params: { dominio }\r\n  });\r\n  const payload = response.data || {};\r\n  if (!payload.success) {\r\n    throw new Error(payload.message || 'Especialista não encontrado');\r\n  }\r\n  return payload.data;\r\n}\r\n\r\nconst especialistasService = { list, getById };\r\nexport default especialistasService;\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;;AAEvC;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;AAExD,SAASC,YAAYA,CAAA,EAAG;EACtB,MAAMC,MAAM,GAAGN,WAAW,CAACO,gBAAgB,CAAC,CAAC;EAC7C,MAAMC,MAAM,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,OAAO;EAC9B,IAAI,CAACD,MAAM,EAAE;IACX,MAAM,IAAIE,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOF,MAAM;AACf;AAEA,eAAeG,IAAIA,CAAA,EAAG;EACpB,MAAMF,OAAO,GAAGJ,YAAY,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAGZ,YAAY,gBAAgB,EAAE;IAChEa,MAAM,EAAE;MAAEL;IAAQ;EACpB,CAAC,CAAC;EACF,MAAMM,OAAO,GAAGH,QAAQ,CAACI,IAAI,IAAI,CAAC,CAAC;EACnC,IAAI,CAACD,OAAO,CAACE,OAAO,EAAE;IACpB,MAAM,IAAIP,KAAK,CAACK,OAAO,CAACG,OAAO,IAAI,8BAA8B,CAAC;EACpE;EACA,OAAOH,OAAO,CAACC,IAAI,IAAI,EAAE;AAC3B;AAEA,eAAeG,OAAOA,CAACC,EAAE,EAAE;EACzB,MAAMX,OAAO,GAAGJ,YAAY,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAGZ,YAAY,kBAAkBmB,EAAE,EAAE,EAAE;IACtEN,MAAM,EAAE;MAAEL;IAAQ;EACpB,CAAC,CAAC;EACF,MAAMM,OAAO,GAAGH,QAAQ,CAACI,IAAI,IAAI,CAAC,CAAC;EACnC,IAAI,CAACD,OAAO,CAACE,OAAO,EAAE;IACpB,MAAM,IAAIP,KAAK,CAACK,OAAO,CAACG,OAAO,IAAI,6BAA6B,CAAC;EACnE;EACA,OAAOH,OAAO,CAACC,IAAI;AACrB;AAEA,MAAMK,oBAAoB,GAAG;EAAEV,IAAI;EAAEQ;AAAQ,CAAC;AAC9C,eAAeE,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}