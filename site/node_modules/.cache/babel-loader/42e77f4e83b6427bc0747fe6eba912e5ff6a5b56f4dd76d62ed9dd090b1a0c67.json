{"ast":null,"code":"import axios from 'axios';\nexport function installAxiosAuthInterceptor() {\n  // Set default header from existing token on boot\n  try {\n    const bootToken = localStorage.getItem('authToken');\n    if (bootToken) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${bootToken}`;\n      axios.defaults.headers.common['X-Auth-Token'] = bootToken;\n    }\n  } catch {}\n\n  // Add Authorization header with Bearer token\n  axios.interceptors.request.use(config => {\n    try {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        config.headers = config.headers || {};\n        config.headers['Authorization'] = `Bearer ${token}`;\n        // Fallback in case a proxy strips Authorization\n        config.headers['X-Auth-Token'] = token;\n      }\n    } catch {}\n    return config;\n  });\n\n  // If token expired or unauthorized, redirect to login\n  axios.interceptors.response.use(res => res, err => {\n    var _err$response;\n    const status = err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status;\n    if (status === 401) {\n      try {\n        localStorage.removeItem('authToken');\n      } catch {}\n    }\n    return Promise.reject(err);\n  });\n}","map":{"version":3,"names":["axios","installAxiosAuthInterceptor","bootToken","localStorage","getItem","defaults","headers","common","interceptors","request","use","config","token","response","res","err","_err$response","status","removeItem","Promise","reject"],"sources":["C:/Users/mduarte/Desktop/Projetos/Dualm_agd/site/src/services/axiosSetup.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport function installAxiosAuthInterceptor() {\r\n  // Set default header from existing token on boot\r\n  try {\r\n    const bootToken = localStorage.getItem('authToken');\r\n    if (bootToken) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${bootToken}`;\r\n      axios.defaults.headers.common['X-Auth-Token'] = bootToken;\r\n    }\r\n  } catch {}\r\n\r\n  // Add Authorization header with Bearer token\r\n  axios.interceptors.request.use((config) => {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      if (token) {\r\n        config.headers = config.headers || {};\r\n        config.headers['Authorization'] = `Bearer ${token}`;\r\n        // Fallback in case a proxy strips Authorization\r\n        config.headers['X-Auth-Token'] = token;\r\n      }\r\n    } catch {}\r\n    return config;\r\n  });\r\n\r\n  // If token expired or unauthorized, redirect to login\r\n  axios.interceptors.response.use(\r\n    (res) => res,\r\n    (err) => {\r\n      const status = err?.response?.status;\r\n      if (status === 401) {\r\n        try {\r\n          localStorage.removeItem('authToken');\r\n        } catch {}\r\n      }\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,2BAA2BA,CAAA,EAAG;EAC5C;EACA,IAAI;IACF,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAIF,SAAS,EAAE;MACbF,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,SAAS,EAAE;MACtEF,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAGL,SAAS;IAC3D;EACF,CAAC,CAAC,MAAM,CAAC;;EAET;EACAF,KAAK,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;IACzC,IAAI;MACF,MAAMC,KAAK,GAAGT,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAIQ,KAAK,EAAE;QACTD,MAAM,CAACL,OAAO,GAAGK,MAAM,CAACL,OAAO,IAAI,CAAC,CAAC;QACrCK,MAAM,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUM,KAAK,EAAE;QACnD;QACAD,MAAM,CAACL,OAAO,CAAC,cAAc,CAAC,GAAGM,KAAK;MACxC;IACF,CAAC,CAAC,MAAM,CAAC;IACT,OAAOD,MAAM;EACf,CAAC,CAAC;;EAEF;EACAX,KAAK,CAACQ,YAAY,CAACK,QAAQ,CAACH,GAAG,CAC5BI,GAAG,IAAKA,GAAG,EACXC,GAAG,IAAK;IAAA,IAAAC,aAAA;IACP,MAAMC,MAAM,GAAGF,GAAG,aAAHA,GAAG,wBAAAC,aAAA,GAAHD,GAAG,CAAEF,QAAQ,cAAAG,aAAA,uBAAbA,aAAA,CAAeC,MAAM;IACpC,IAAIA,MAAM,KAAK,GAAG,EAAE;MAClB,IAAI;QACFd,YAAY,CAACe,UAAU,CAAC,WAAW,CAAC;MACtC,CAAC,CAAC,MAAM,CAAC;IACX;IACA,OAAOC,OAAO,CAACC,MAAM,CAACL,GAAG,CAAC;EAC5B,CACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}