{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mduarte\\\\Desktop\\\\Projetos\\\\Dualm_agd\\\\site\\\\src\\\\contexts\\\\StackNav.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useMemo, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StackNavContext = /*#__PURE__*/createContext(null);\nexport const StackNavProvider = ({\n  children\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState('login'); // 'login' | 'dashboard' | 'about' | 'contact'\n\n  // Inicializa a página de acordo com a autenticação existente\n  useEffect(() => {\n    if (authService.isAuthenticated()) {\n      setCurrentPage('dashboard');\n    } else {\n      setCurrentPage('login');\n    }\n  }, []);\n  const value = useMemo(() => ({\n    currentPage,\n    setCurrentPage\n  }), [currentPage]);\n  return /*#__PURE__*/_jsxDEV(StackNavContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(StackNavProvider, \"tGNRPvp572idNSKGPmN8iLvT11c=\");\n_c = StackNavProvider;\nexport const useStackNav = () => {\n  _s2();\n  const ctx = useContext(StackNavContext);\n  if (!ctx) throw new Error('useStackNav must be used within StackNavProvider');\n  return ctx;\n};\n_s2(useStackNav, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"StackNavProvider\");","map":{"version":3,"names":["React","createContext","useContext","useMemo","useState","useEffect","authService","jsxDEV","_jsxDEV","StackNavContext","StackNavProvider","children","_s","currentPage","setCurrentPage","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStackNav","_s2","ctx","Error","$RefreshReg$"],"sources":["C:/Users/mduarte/Desktop/Projetos/Dualm_agd/site/src/contexts/StackNav.js"],"sourcesContent":["import React, { createContext, useContext, useMemo, useState, useEffect } from 'react';\r\nimport authService from '../services/authService';\r\n\r\nconst StackNavContext = createContext(null);\r\n\r\nexport const StackNavProvider = ({ children }) => {\r\n  const [currentPage, setCurrentPage] = useState('login'); // 'login' | 'dashboard' | 'about' | 'contact'\r\n\r\n  // Inicializa a página de acordo com a autenticação existente\r\n  useEffect(() => {\r\n    if (authService.isAuthenticated()) {\r\n      setCurrentPage('dashboard');\r\n    } else {\r\n      setCurrentPage('login');\r\n    }\r\n  }, []);\r\n\r\n  const value = useMemo(() => ({ currentPage, setCurrentPage }), [currentPage]);\r\n  return (\r\n    <StackNavContext.Provider value={value}>\r\n      {children}\r\n    </StackNavContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStackNav = () => {\r\n  const ctx = useContext(StackNavContext);\r\n  if (!ctx) throw new Error('useStackNav must be used within StackNavProvider');\r\n  return ctx;\r\n};\r\n\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtF,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,eAAe,gBAAGR,aAAa,CAAC,IAAI,CAAC;AAE3C,OAAO,MAAMS,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEzD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIC,WAAW,CAACS,eAAe,CAAC,CAAC,EAAE;MACjCD,cAAc,CAAC,WAAW,CAAC;IAC7B,CAAC,MAAM;MACLA,cAAc,CAAC,OAAO,CAAC;IACzB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,KAAK,GAAGb,OAAO,CAAC,OAAO;IAAEU,WAAW;IAAEC;EAAe,CAAC,CAAC,EAAE,CAACD,WAAW,CAAC,CAAC;EAC7E,oBACEL,OAAA,CAACC,eAAe,CAACQ,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAL,QAAA,EACpCA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACT,EAAA,CAlBWF,gBAAgB;AAAAY,EAAA,GAAhBZ,gBAAgB;AAoB7B,OAAO,MAAMa,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,GAAG,GAAGvB,UAAU,CAACO,eAAe,CAAC;EACvC,IAAI,CAACgB,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EAC7E,OAAOD,GAAG;AACZ,CAAC;AAACD,GAAA,CAJWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}