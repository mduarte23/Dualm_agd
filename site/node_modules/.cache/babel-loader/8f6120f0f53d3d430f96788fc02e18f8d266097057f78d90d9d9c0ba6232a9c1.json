{"ast":null,"code":"import axios from 'axios';\n\n// Configuração base da API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass AuthService {\n  // Consulta o domínio na tabela empresas_clientes e retorna o IP do banco\n  async getClientDatabase(domain) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/client-database`, {\n        params: {\n          domain\n        }\n      });\n      if (response.data.success) {\n        return {\n          success: true,\n          clientIp: response.data.clientIp,\n          clientName: response.data.clientName,\n          databaseConfig: response.data.databaseConfig\n        };\n      } else {\n        throw new Error(response.data.message || 'Domínio não encontrado');\n      }\n    } catch (error) {\n      console.error('Erro ao consultar domínio:', error);\n      throw new Error('Erro ao consultar domínio. Verifique se está correto.');\n    }\n  }\n\n  // Faz login no banco de dados do cliente\n  async loginToClientDatabase(clientIp, email, password, databaseConfig) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/client-login`, {\n        clientIp,\n        email,\n        password,\n        databaseConfig\n      });\n      if (response.data.success) {\n        // Salvar token e informações do usuário\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('userInfo', JSON.stringify(response.data.user));\n        localStorage.setItem('clientInfo', JSON.stringify(response.data.clientInfo));\n        return {\n          success: true,\n          user: response.data.user,\n          clientInfo: response.data.clientInfo,\n          token: response.data.token\n        };\n      } else {\n        throw new Error(response.data.message || 'Credenciais inválidas');\n      }\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Erro no login:', error);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        throw new Error('E-mail ou senha incorretos');\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n        throw new Error('Usuário não encontrado neste sistema');\n      } else {\n        throw new Error('Erro ao fazer login. Tente novamente.');\n      }\n    }\n  }\n\n  // Login principal que orquestra todo o processo\n  async login(domain, email, password) {\n    try {\n      // 1. Consultar o domínio para obter o IP do banco do cliente\n      console.log('Consultando domínio:', domain);\n      const clientDb = await this.getClientDatabase(domain);\n\n      // 2. Fazer login no banco do cliente\n      console.log('Fazendo login no banco do cliente:', clientDb.clientIp);\n      const loginResult = await this.loginToClientDatabase(clientDb.clientIp, email, password, clientDb.databaseConfig);\n      return {\n        success: true,\n        user: loginResult.user,\n        clientInfo: loginResult.clientInfo,\n        clientDatabase: clientDb\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Verificar se o usuário está logado\n  isAuthenticated() {\n    const token = localStorage.getItem('authToken');\n    return !!token;\n  }\n\n  // Obter informações do usuário logado\n  getCurrentUser() {\n    const userInfo = localStorage.getItem('userInfo');\n    return userInfo ? JSON.parse(userInfo) : null;\n  }\n\n  // Obter informações do cliente\n  getCurrentClient() {\n    const clientInfo = localStorage.getItem('clientInfo');\n    return clientInfo ? JSON.parse(clientInfo) : null;\n  }\n\n  // Logout\n  logout() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('clientInfo');\n  }\n\n  // Obter token de autenticação\n  getAuthToken() {\n    return localStorage.getItem('authToken');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","getClientDatabase","domain","response","get","params","data","success","clientIp","clientName","databaseConfig","Error","message","error","console","loginToClientDatabase","email","password","post","localStorage","setItem","token","JSON","stringify","user","clientInfo","_error$response","_error$response2","status","login","log","clientDb","loginResult","clientDatabase","isAuthenticated","getItem","getCurrentUser","userInfo","parse","getCurrentClient","logout","removeItem","getAuthToken"],"sources":["C:/Users/mduarte/Desktop/Projetos/Dualm_agd/site/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configuração base da API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nclass AuthService {\r\n  // Consulta o domínio na tabela empresas_clientes e retorna o IP do banco\r\n  async getClientDatabase(domain) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/api/client-database`, {\r\n        params: { domain }\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        return {\r\n          success: true,\r\n          clientIp: response.data.clientIp,\r\n          clientName: response.data.clientName,\r\n          databaseConfig: response.data.databaseConfig\r\n        };\r\n      } else {\r\n        throw new Error(response.data.message || 'Domínio não encontrado');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao consultar domínio:', error);\r\n      throw new Error('Erro ao consultar domínio. Verifique se está correto.');\r\n    }\r\n  }\r\n\r\n  // Faz login no banco de dados do cliente\r\n  async loginToClientDatabase(clientIp, email, password, databaseConfig) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/client-login`, {\r\n        clientIp,\r\n        email,\r\n        password,\r\n        databaseConfig\r\n      });\r\n\r\n      if (response.data.success) {\r\n        // Salvar token e informações do usuário\r\n        localStorage.setItem('authToken', response.data.token);\r\n        localStorage.setItem('userInfo', JSON.stringify(response.data.user));\r\n        localStorage.setItem('clientInfo', JSON.stringify(response.data.clientInfo));\r\n        \r\n        return {\r\n          success: true,\r\n          user: response.data.user,\r\n          clientInfo: response.data.clientInfo,\r\n          token: response.data.token\r\n        };\r\n      } else {\r\n        throw new Error(response.data.message || 'Credenciais inválidas');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro no login:', error);\r\n      if (error.response?.status === 401) {\r\n        throw new Error('E-mail ou senha incorretos');\r\n      } else if (error.response?.status === 404) {\r\n        throw new Error('Usuário não encontrado neste sistema');\r\n      } else {\r\n        throw new Error('Erro ao fazer login. Tente novamente.');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Login principal que orquestra todo o processo\r\n  async login(domain, email, password) {\r\n    try {\r\n      // 1. Consultar o domínio para obter o IP do banco do cliente\r\n      console.log('Consultando domínio:', domain);\r\n      const clientDb = await this.getClientDatabase(domain);\r\n      \r\n      // 2. Fazer login no banco do cliente\r\n      console.log('Fazendo login no banco do cliente:', clientDb.clientIp);\r\n      const loginResult = await this.loginToClientDatabase(\r\n        clientDb.clientIp,\r\n        email,\r\n        password,\r\n        clientDb.databaseConfig\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        user: loginResult.user,\r\n        clientInfo: loginResult.clientInfo,\r\n        clientDatabase: clientDb\r\n      };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Verificar se o usuário está logado\r\n  isAuthenticated() {\r\n    const token = localStorage.getItem('authToken');\r\n    return !!token;\r\n  }\r\n\r\n  // Obter informações do usuário logado\r\n  getCurrentUser() {\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    return userInfo ? JSON.parse(userInfo) : null;\r\n  }\r\n\r\n  // Obter informações do cliente\r\n  getCurrentClient() {\r\n    const clientInfo = localStorage.getItem('clientInfo');\r\n    return clientInfo ? JSON.parse(clientInfo) : null;\r\n  }\r\n\r\n  // Logout\r\n  logout() {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('clientInfo');\r\n  }\r\n\r\n  // Obter token de autenticação\r\n  getAuthToken() {\r\n    return localStorage.getItem('authToken');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}